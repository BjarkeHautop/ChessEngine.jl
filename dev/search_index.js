var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/#ChessEngine.Board","page":"API","title":"ChessEngine.Board","text":"A chess board representation using bitboards.\n\nbitboards: A dictionary mapping piece types to their corresponding bitboards.\nside_to_move: The side to move.\ncastling_rights: A 4-bit integer representing castling rights (KQkq).\nen_passant: The square index (0-63) for en passant target, or -1 if none.\nhalfmove_clock: The number of halfmoves since the last capture or pawn move (for the 50-move rule).\nposition_history: A vector of position Zobrist hashes for detecting threefold repetition.\nundo_stack: A stack of UndoInfo structs for unmaking moves.\neval_score: Cached evaluation score from White's point of view.\ngame_phase_value: Cached phase numerator (sum of weights) for evaluation scaling.\n\n\n\n\n\n","category":"type"},{"location":"api/#ChessEngine.Game","page":"API","title":"ChessEngine.Game","text":"A struct representing a chess game with time control.\n\nboard: The current state of the chess board.\nwhite_time: Time remaining for White in milliseconds.\nblack_time: Time remaining for Black in milliseconds.\nincrement: Time increment per move in milliseconds.\n\n\n\n\n\n","category":"type"},{"location":"api/#ChessEngine.Move","page":"API","title":"ChessEngine.Move","text":"A chess move.\n\nfrom and to are square indices 0..63\npromotion is the piece type promoted to (0 if none)\ncapture is captured piece type (0 if none)\ncastling: 0 = normal, 1 = kingside, 2 = queenside\nen_passant: true if en passant capture\n\n\n\n\n\n","category":"type"},{"location":"api/#ChessEngine.TTEntry","page":"API","title":"ChessEngine.TTEntry","text":"Transposition table entry.\n\nkey: Zobrist hash of the position (for collision checking)\nvalue: evaluation score\ndepth: search depth at which this value was computed\nnode_type: type of node (EXACT, LOWERBOUND, UPPERBOUND)\nbest_move: best move found from this position\n\n\n\n\n\n","category":"type"},{"location":"api/#ChessEngine.UndoInfo","page":"API","title":"ChessEngine.UndoInfo","text":"Information needed to undo a move\n\ncaptured_piece: The piece type that was captured, or 0 if none.\nen_passant: The previous en passant square.\ncastling_rights: The previous castling rights.\nhalfmove_clock: The previous halfmove clock.\nmoved_piece: The piece type that was moved.\npromotion: The piece type if the move was a promotion, or 0 otherwise.\nis_en_passant: A boolean indicating if the move was an en passant capture.\n\n\n\n\n\n","category":"type"},{"location":"api/#ChessEngine.clearbit-Tuple{UInt64, Int64}","page":"API","title":"ChessEngine.clearbit","text":"Clear bit at square sq.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.compute_eval_and_phase-Tuple{Board}","page":"API","title":"ChessEngine.compute_eval_and_phase","text":"compute_eval_and_phase(board::Board) -> (Int, Int)\n\nCompute the evaluation score (from White's perspective) and the game phase value from scratch for a given board.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.evaluate-Tuple{Board}","page":"API","title":"ChessEngine.evaluate","text":"Evaluate a position from White’s perspective using piece-square tables.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.extract_pv-Tuple{Board, Int64}","page":"API","title":"ChessEngine.extract_pv","text":"Reconstruct the principal variation (PV) from the transposition table\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.file_rank-Tuple{Int64}","page":"API","title":"ChessEngine.file_rank","text":"Return file (1..8) and rank (1..8) for a square index\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.flip_table-Tuple{Vector{Int64}}","page":"API","title":"ChessEngine.flip_table","text":"Flip a piece-square table vertically (white → black perspective). Input is a 64-element vector (row-major, starting at A8). Returns a new 64-element vector with ranks mirrored.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.game_over-Tuple{Board}","page":"API","title":"ChessEngine.game_over","text":"Check if the game is over (checkmate, stalemate, draw)\n\nboard: Board struct\n\nReturns: Symbol (:checkmatewhite, :checkmateblack, :stalemate, :drawthreefold, :drawfiftymove,  :drawinsufficientmaterial, :ongoing)\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.game_phase-Tuple{Board}","page":"API","title":"ChessEngine.game_phase","text":"Compute game phase (0 = endgame, 1 = opening).  A simple heuristic: count non-pawn, non-king material. \n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.generate_bishop_moves-Tuple{Board}","page":"API","title":"ChessEngine.generate_bishop_moves","text":"Generate pseudo-legal bishop moves for the given side\n\nboard: Board struct\n\nReturns: Vector of Move\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.generate_pawn_moves!-Tuple{Board, Vector{Move}}","page":"API","title":"ChessEngine.generate_pawn_moves!","text":"Generate pseudo-legal pawn moves in-place\n\nboard: Board struct\nmoves: preallocated buffer to append moves\n\nReturns: number of moves added\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.generate_pawn_moves-Tuple{Board}","page":"API","title":"ChessEngine.generate_pawn_moves","text":"Generate pseudo-legal pawn moves for the side to move\n\nboard: Board struct\n\nReturns: Vector of Move\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.generate_queen_moves-Tuple{Board}","page":"API","title":"ChessEngine.generate_queen_moves","text":"Generate pseudo-legal queen moves for the given side\n\nboard: Board struct\n\nReturns: Vector of Move\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.generate_rook_moves-Tuple{Board}","page":"API","title":"ChessEngine.generate_rook_moves","text":"Generate pseudo-legal rook moves for the given side\n\nboard: Board struct\n\nReturns: Vector of Move\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.in_check-Tuple{Board, ChessEngine.Side}","page":"API","title":"ChessEngine.in_check","text":"Check if the king of the given side is in check\n\nboard: Board struct\nside: Side (WHITE or BLACK)\n\nReturns: Bool\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.is_fifty_move_rule-Tuple{Board}","page":"API","title":"ChessEngine.is_fifty_move_rule","text":"Check for fifty-move rule\n\nboard: Board struct\n\nReturns: Bool\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.is_insufficient_material-Tuple{Board}","page":"API","title":"ChessEngine.is_insufficient_material","text":"Check for insufficient material to mate\n\nboard: Board struct\n\nReturns: Bool\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.is_threefold_repetition-Tuple{Board}","page":"API","title":"ChessEngine.is_threefold_repetition","text":"Check for threefold repetition\n\nboard: Board struct\n\nReturns: Bool\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.king_square-Tuple{Board, ChessEngine.Side}","page":"API","title":"ChessEngine.king_square","text":"Get the square index of the king for the given side\n\nboard: Board struct\nside: Side (WHITE or BLACK)\n\nReturns: Int (square index 0..63)\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.make_move!-Tuple{Board, Move}","page":"API","title":"ChessEngine.make_move!","text":"Apply move m to board, modifying it in place.\n\nboard: Board struct\nm: Move\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.make_null_move!-Tuple{Board}","page":"API","title":"ChessEngine.make_null_move!","text":"Apply a null move (pass) to the board, modifying it in place. Used for null-move pruning.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.move_ordering_score-Tuple{Board, Move, Int64}","page":"API","title":"ChessEngine.move_ordering_score","text":"Heuristic to score moves for ordering:\n\nPromotions are prioritized highest.\nCaptures are prioritized higher.\nMoves giving check are prioritized.\nQuiet moves get a lower score.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.on_board-Tuple{Int64}","page":"API","title":"ChessEngine.on_board","text":"Check if a square index is on the board\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.perft-Tuple{Board, Int64}","page":"API","title":"ChessEngine.perft","text":"perft(board::Board, depth::Int) -> Int\n\nPerformance test function: counts the number of leaf nodes reachable from the given board position up to depth.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.perft_fast-Tuple{Board, Int64}","page":"API","title":"ChessEngine.perft_fast","text":"perft_fast(board::Board, depth::Int) -> Int\n\nFast perft function using a preallocated moves buffer to avoid repeated allocations. Ideal for benchmarking.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.piece_at-Tuple{Board, Int64}","page":"API","title":"ChessEngine.piece_at","text":"Return the piece type at a given square (0..63) using bitboards.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.piece_square_value-Tuple{Int64, Int64, Float64}","page":"API","title":"ChessEngine.piece_square_value","text":"Return the PSQT value of a piece on a given square.\n\npiece: WPAWN..BKING\nsquare: 0..63 (a1=0, h8=63)\nphase: Float64 in [0.0, 1.0], where 1.0 = opening, 0.0 = endgame\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.search-Tuple{Board, Int64}","page":"API","title":"ChessEngine.search","text":"search(\n    board::Board, \n    depth::Int;\n    ply::Int = 0,\n    α::Int = (-MATE_VALUE),\n    β::Int = MATE_VALUE,\n    opening_book::Union{Nothing,PolyglotBook} = KOMODO_OPENING_BOOK,\n    verbose::Bool = false,\n    time_budget::Int = typemax(Int)\n)\n\nSearch for the best move using minimax with alpha-beta pruning, quiescence search, null move pruning, and transposition tables.\n\nArguments:\n\nboard: current board position\ndepth: search depth\nopening_book: if provided, uses a opening book. Default is KOMODO_OPENING_BOOK \n\ntaken from https://github.com/gmcheems-org/free-opening-books. Set to nothing to disable. \n\nverbose: if true, prints a single-line progress indicator (only at root)\ntime_budget: time in milliseconds to stop the search (if depth not reached)\n\nReturns:\n\n(best_score, best_move)\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.setbit-Tuple{UInt64, Int64}","page":"API","title":"ChessEngine.setbit","text":"Set bit at square sq.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.square_attacked-Tuple{Board, Int64, ChessEngine.Side}","page":"API","title":"ChessEngine.square_attacked","text":"Check if a square is attacked by the given side.\n\nboard: Board struct\nsq: Int (square index 0..63)\nattacker: Side (WHITE or BLACK)\n\nReturns: Bool\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.square_index-Tuple{AbstractString}","page":"API","title":"ChessEngine.square_index","text":"Map algebraic notation (e.g. 'e3') → square index (0..63).\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.square_index-Tuple{Int64, Int64}","page":"API","title":"ChessEngine.square_index","text":"Map (file, rank) → square index (0..63). file=1→a, rank=1→1.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.store_killer!-Tuple{Move, Int64}","page":"API","title":"ChessEngine.store_killer!","text":"Store a killer move for the given ply. Only quiet moves (non-captures) are stored.\n\nm: the move to store\nply: the current ply\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.testbit-Tuple{UInt64, Int64}","page":"API","title":"ChessEngine.testbit","text":"Check if bit at square sq is set.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.tt_index-Tuple{UInt64}","page":"API","title":"ChessEngine.tt_index","text":"Get index in transposition table from hash.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.tt_probe-Tuple{UInt64, Int64, Int64, Int64}","page":"API","title":"ChessEngine.tt_probe","text":"Look up a position in the transposition table.\n\nhash: Zobrist hash of the position\ndepth: current search depth\nα: alpha value\nβ: beta value\n\nReturns a tuple (value, best_move, hit) where hit is true if a valid entry was found.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.tt_store-Tuple{UInt64, Int64, Int64, ChessEngine.NodeType, Any}","page":"API","title":"ChessEngine.tt_store","text":"Store an entry in the transposition table.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.undo_move!-Tuple{Board, Move}","page":"API","title":"ChessEngine.undo_move!","text":"Undo move m on board, restoring previous state. Relies on the UndoInfo pushed during make_move!.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChessEngine.unmake_null_move!-Tuple{Board}","page":"API","title":"ChessEngine.unmake_null_move!","text":"Undo a null move, restoring the previous board state.\n\n\n\n\n\n","category":"method"},{"location":"starting/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"starting/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"Can not yet be installed using the Julia package manager. Clone the repository and use ] dev /path/to/ChessEngine to install it.","category":"page"},{"location":"starting/#Playing-Chess","page":"Getting Started","title":"Playing Chess","text":"","category":"section"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"First we load the package:","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"using ChessEngine","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"We can create a new chess game using:","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"board = start_position()","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"or load a game from a FEN string:","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"board = board_from_fen(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\")","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"This is a struct of type Board which contains the bitboards, side to move, castling rights, en passant square, halfmove clock, position history, undo stack, eval score and game phase value.","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"To display the board, we can use:","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"display_board(board)","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"We can use Move to create a move and make_move! to make the move on the board:","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"mv = Move(\"e2\", \"e4\")\nmake_move!(board, mv)","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"We can undo a move using undo_move!:","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"undo_move!(board, mv)","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"We can generate a move using the chess engine:","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"result = search(board, depth=3; opening_book=nothing)","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"search returns a SearchResult object containing the evaluation score, the move and if it is a book move. This package ships with a small opening book, which is default when calling search. To disable the opening book, set opening_book=nothing and to use a custom opening book use load_polyglot_book to load another polyglot book in .bin format.","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"To make a 3+2 game we can use:","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"game = start_game(; minutes = 3, increment = 2)","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"This is a struct of type Game which contains the board, white and black time left, and the increment.","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"The engine will then automatically allocate how much time to use for each move. To make a move in the game we can use:","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"make_timed_move!(game)","category":"page"},{"location":"#ChessEngine","page":"Home","title":"ChessEngine","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ChessEngine is a Julia chess engine. It implements functionality for playing chess and for searching for the best move using the implemented chess engine.","category":"page"}]
}
